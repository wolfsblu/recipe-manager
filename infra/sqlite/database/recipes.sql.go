// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: recipes.sql

package database

import (
	"context"
	"strings"
	"time"
)

const addIngredientNutrient = `-- name: AddIngredientNutrient :exec
INSERT INTO ingredient_nutrients (ingredient_id, nutrient_id, amount)
VALUES (?, ?, ?)
ON CONFLICT (ingredient_id, nutrient_id) DO UPDATE SET amount = excluded.amount
`

type AddIngredientNutrientParams struct {
	IngredientID int64
	NutrientID   int64
	Amount       float64
}

func (q *Queries) AddIngredientNutrient(ctx context.Context, arg AddIngredientNutrientParams) error {
	_, err := q.db.ExecContext(ctx, addIngredientNutrient, arg.IngredientID, arg.NutrientID, arg.Amount)
	return err
}

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (name)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateIngredient(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createMealPlan = `-- name: CreateMealPlan :exec
INSERT INTO meal_plan (date, user_id, recipe_id, sort_order)
VALUES (?, ?, ?, ?)
`

type CreateMealPlanParams struct {
	Date      string
	UserID    int64
	RecipeID  int64
	SortOrder int64
}

func (q *Queries) CreateMealPlan(ctx context.Context, arg CreateMealPlanParams) error {
	_, err := q.db.ExecContext(ctx, createMealPlan,
		arg.Date,
		arg.UserID,
		arg.RecipeID,
		arg.SortOrder,
	)
	return err
}

const createNutrient = `-- name: CreateNutrient :one
INSERT INTO nutrients (name, unit)
VALUES (?, ?)
RETURNING id
`

type CreateNutrientParams struct {
	Name string
	Unit string
}

func (q *Queries) CreateNutrient(ctx context.Context, arg CreateNutrientParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNutrient, arg.Name, arg.Unit)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (name, servings, minutes, description, created_by)
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type CreateRecipeParams struct {
	Name        string
	Servings    int64
	Minutes     int64
	Description string
	CreatedBy   int64
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.Servings,
		arg.Minutes,
		arg.Description,
		arg.CreatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRecipeImages = `-- name: CreateRecipeImages :one
INSERT INTO recipe_images (recipe_id, path, sort_order)
VALUES (?, ?, ?)
RETURNING id
`

type CreateRecipeImagesParams struct {
	RecipeID  int64
	Path      string
	SortOrder int64
}

func (q *Queries) CreateRecipeImages(ctx context.Context, arg CreateRecipeImagesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRecipeImages, arg.RecipeID, arg.Path, arg.SortOrder)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRecipeStep = `-- name: CreateRecipeStep :one
INSERT INTO recipe_steps (recipe_id, instructions, sort_order)
VALUES (?, ?, ?)
RETURNING id
`

type CreateRecipeStepParams struct {
	RecipeID     int64
	Instructions string
	SortOrder    int64
}

func (q *Queries) CreateRecipeStep(ctx context.Context, arg CreateRecipeStepParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRecipeStep, arg.RecipeID, arg.Instructions, arg.SortOrder)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRecipeTag = `-- name: CreateRecipeTag :exec
INSERT INTO recipe_tags (recipe_id, tag_id)
VALUES (?, ?)
`

type CreateRecipeTagParams struct {
	RecipeID int64
	TagID    int64
}

func (q *Queries) CreateRecipeTag(ctx context.Context, arg CreateRecipeTagParams) error {
	_, err := q.db.ExecContext(ctx, createRecipeTag, arg.RecipeID, arg.TagID)
	return err
}

const createStepIngredient = `-- name: CreateStepIngredient :one
INSERT INTO recipe_ingredients (step_id, ingredient_id, unit_id, amount, sort_order)
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type CreateStepIngredientParams struct {
	StepID       int64
	IngredientID int64
	UnitID       int64
	Amount       float64
	SortOrder    int64
}

func (q *Queries) CreateStepIngredient(ctx context.Context, arg CreateStepIngredientParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStepIngredient,
		arg.StepID,
		arg.IngredientID,
		arg.UnitID,
		arg.Amount,
		arg.SortOrder,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (name, symbol)
VALUES (?, ?)
RETURNING id
`

type CreateUnitParams struct {
	Name   string
	Symbol *string
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUnit, arg.Name, arg.Symbol)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE id = ?
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const deleteIngredientNutrients = `-- name: DeleteIngredientNutrients :exec
DELETE FROM ingredient_nutrients
WHERE ingredient_id = ?
`

func (q *Queries) DeleteIngredientNutrients(ctx context.Context, ingredientID int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredientNutrients, ingredientID)
	return err
}

const deleteMealPlan = `-- name: DeleteMealPlan :exec
DELETE FROM meal_plan
WHERE user_id = ? AND recipe_id = ? AND date = ?
`

type DeleteMealPlanParams struct {
	UserID   int64
	RecipeID int64
	Date     string
}

func (q *Queries) DeleteMealPlan(ctx context.Context, arg DeleteMealPlanParams) error {
	_, err := q.db.ExecContext(ctx, deleteMealPlan, arg.UserID, arg.RecipeID, arg.Date)
	return err
}

const deleteNutrient = `-- name: DeleteNutrient :exec
DELETE FROM nutrients
WHERE id = ?
`

func (q *Queries) DeleteNutrient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNutrient, id)
	return err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE
FROM recipes
WHERE id = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const deleteRecipeImages = `-- name: DeleteRecipeImages :exec
DELETE FROM recipe_images
WHERE recipe_id = ?
`

func (q *Queries) DeleteRecipeImages(ctx context.Context, recipeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeImages, recipeID)
	return err
}

const deleteRecipeIngredients = `-- name: DeleteRecipeIngredients :exec
DELETE FROM recipe_ingredients
WHERE step_id IN (
    SELECT id FROM recipe_steps WHERE recipe_id = ?
)
`

func (q *Queries) DeleteRecipeIngredients(ctx context.Context, recipeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeIngredients, recipeID)
	return err
}

const deleteRecipeSteps = `-- name: DeleteRecipeSteps :exec
DELETE FROM recipe_steps
WHERE recipe_id = ?
`

func (q *Queries) DeleteRecipeSteps(ctx context.Context, recipeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeSteps, recipeID)
	return err
}

const deleteRecipeTags = `-- name: DeleteRecipeTags :exec
DELETE FROM recipe_tags
WHERE recipe_id = ?
`

func (q *Queries) DeleteRecipeTags(ctx context.Context, recipeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeTags, recipeID)
	return err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM units
WHERE id = ?
`

func (q *Queries) DeleteUnit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, id)
	return err
}

const getImagesForRecipes = `-- name: GetImagesForRecipes :many
SELECT id, path, sort_order, recipe_id
FROM recipe_images
WHERE recipe_id IN (
    /*SLICE:recipe_ids*/?
    )
ORDER BY sort_order
`

type GetImagesForRecipesRow struct {
	ID        int64
	Path      string
	SortOrder int64
	RecipeID  int64
}

func (q *Queries) GetImagesForRecipes(ctx context.Context, recipeIds []int64) ([]GetImagesForRecipesRow, error) {
	query := getImagesForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImagesForRecipesRow
	for rows.Next() {
		var i GetImagesForRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.SortOrder,
			&i.RecipeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredients = `-- name: GetIngredients :many
SELECT id, name
FROM ingredients
WHERE (name, id) > (?1, CAST(?2 AS INTEGER))
ORDER BY name, id
LIMIT ?3
`

type GetIngredientsParams struct {
	LastName string
	LastID   int64
	Limit    int64
}

func (q *Queries) GetIngredients(ctx context.Context, arg GetIngredientsParams) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients, arg.LastName, arg.LastID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientsForRecipes = `-- name: GetIngredientsForRecipes :many
SELECT recipe_ingredients.id as recipe_ingredient_id, 
       ingredients.id as ingredient_id, 
       ingredients.name as ingredient_name, 
       units.id as unit_id, 
       units.name as unit_name, 
       units.symbol as unit_symbol, 
       recipe_steps.id as step_id, 
       recipe_ingredients.amount, 
       recipe_ingredients.sort_order
FROM recipe_ingredients
         INNER JOIN recipe_steps ON recipe_ingredients.step_id = recipe_steps.id
         INNER JOIN ingredients ON recipe_ingredients.ingredient_id = ingredients.id
         INNER JOIN units ON recipe_ingredients.unit_id = units.id
WHERE recipe_steps.recipe_id IN (
    /*SLICE:recipe_ids*/?
    )
ORDER BY recipe_ingredients.sort_order
`

type GetIngredientsForRecipesRow struct {
	RecipeIngredientID int64
	IngredientID       int64
	IngredientName     string
	UnitID             int64
	UnitName           string
	UnitSymbol         *string
	StepID             int64
	Amount             float64
	SortOrder          int64
}

func (q *Queries) GetIngredientsForRecipes(ctx context.Context, recipeIds []int64) ([]GetIngredientsForRecipesRow, error) {
	query := getIngredientsForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIngredientsForRecipesRow
	for rows.Next() {
		var i GetIngredientsForRecipesRow
		if err := rows.Scan(
			&i.RecipeIngredientID,
			&i.IngredientID,
			&i.IngredientName,
			&i.UnitID,
			&i.UnitName,
			&i.UnitSymbol,
			&i.StepID,
			&i.Amount,
			&i.SortOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealPlan = `-- name: GetMealPlan :many
SELECT meal_plan.id, meal_plan.date, meal_plan.user_id, meal_plan.recipe_id, meal_plan.sort_order,
       recipes.id, recipes.name, recipes.servings, recipes.minutes, recipes.description, recipes.created_by, recipes.created_at
FROM meal_plan
         INNER JOIN recipes ON meal_plan.recipe_id = recipes.id
WHERE user_id = ?1
  AND meal_plan.date >= ?2
  AND meal_plan.date <= ?3
  AND (meal_plan.date, meal_plan.id) > (?4, CAST(?5 AS INTEGER))
ORDER BY meal_plan.date, meal_plan.id
LIMIT ?6
`

type GetMealPlanParams struct {
	UserID    int64
	FromDate  string
	UntilDate string
	LastDate  string
	LastID    int64
	Limit     int64
}

type GetMealPlanRow struct {
	MealPlan MealPlan
	Recipe   Recipe
}

func (q *Queries) GetMealPlan(ctx context.Context, arg GetMealPlanParams) ([]GetMealPlanRow, error) {
	rows, err := q.db.QueryContext(ctx, getMealPlan,
		arg.UserID,
		arg.FromDate,
		arg.UntilDate,
		arg.LastDate,
		arg.LastID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMealPlanRow
	for rows.Next() {
		var i GetMealPlanRow
		if err := rows.Scan(
			&i.MealPlan.ID,
			&i.MealPlan.Date,
			&i.MealPlan.UserID,
			&i.MealPlan.RecipeID,
			&i.MealPlan.SortOrder,
			&i.Recipe.ID,
			&i.Recipe.Name,
			&i.Recipe.Servings,
			&i.Recipe.Minutes,
			&i.Recipe.Description,
			&i.Recipe.CreatedBy,
			&i.Recipe.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNutrients = `-- name: GetNutrients :many
SELECT id, name, unit
FROM nutrients
ORDER BY name
`

func (q *Queries) GetNutrients(ctx context.Context) ([]Nutrient, error) {
	rows, err := q.db.QueryContext(ctx, getNutrients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nutrient
	for rows.Next() {
		var i Nutrient
		if err := rows.Scan(&i.ID, &i.Name, &i.Unit); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNutrientsForIngredient = `-- name: GetNutrientsForIngredient :many
SELECT nutrients.id, nutrients.name, nutrients.unit, ingredient_nutrients.amount
FROM ingredient_nutrients
INNER JOIN nutrients ON ingredient_nutrients.nutrient_id = nutrients.id
WHERE ingredient_nutrients.ingredient_id = ?
ORDER BY nutrients.name
`

type GetNutrientsForIngredientRow struct {
	Nutrient Nutrient
	Amount   float64
}

func (q *Queries) GetNutrientsForIngredient(ctx context.Context, ingredientID int64) ([]GetNutrientsForIngredientRow, error) {
	rows, err := q.db.QueryContext(ctx, getNutrientsForIngredient, ingredientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNutrientsForIngredientRow
	for rows.Next() {
		var i GetNutrientsForIngredientRow
		if err := rows.Scan(
			&i.Nutrient.ID,
			&i.Nutrient.Name,
			&i.Nutrient.Unit,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNutrientsForIngredients = `-- name: GetNutrientsForIngredients :many
SELECT ingredient_nutrients.ingredient_id, nutrients.id, nutrients.name, nutrients.unit, ingredient_nutrients.amount
FROM ingredient_nutrients
INNER JOIN nutrients ON ingredient_nutrients.nutrient_id = nutrients.id
WHERE ingredient_nutrients.ingredient_id IN (/*SLICE:ingredient_ids*/?)
ORDER BY ingredient_nutrients.ingredient_id, nutrients.name
`

type GetNutrientsForIngredientsRow struct {
	IngredientID int64
	Nutrient     Nutrient
	Amount       float64
}

func (q *Queries) GetNutrientsForIngredients(ctx context.Context, ingredientIds []int64) ([]GetNutrientsForIngredientsRow, error) {
	query := getNutrientsForIngredients
	var queryParams []interface{}
	if len(ingredientIds) > 0 {
		for _, v := range ingredientIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ingredient_ids*/?", strings.Repeat(",?", len(ingredientIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ingredient_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNutrientsForIngredientsRow
	for rows.Next() {
		var i GetNutrientsForIngredientsRow
		if err := rows.Scan(
			&i.IngredientID,
			&i.Nutrient.ID,
			&i.Nutrient.Name,
			&i.Nutrient.Unit,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNutrientsForRecipes = `-- name: GetNutrientsForRecipes :many
SELECT ingredient_nutrients.ingredient_id, nutrients.id, nutrients.name, nutrients.unit, ingredient_nutrients.amount
FROM ingredient_nutrients
INNER JOIN nutrients ON ingredient_nutrients.nutrient_id = nutrients.id
INNER JOIN recipe_ingredients ON ingredient_nutrients.ingredient_id = recipe_ingredients.ingredient_id
INNER JOIN recipe_steps ON recipe_ingredients.step_id = recipe_steps.id
WHERE recipe_steps.recipe_id IN (/*SLICE:recipe_ids*/?)
ORDER BY ingredient_nutrients.ingredient_id, nutrients.name
`

type GetNutrientsForRecipesRow struct {
	IngredientID int64
	Nutrient     Nutrient
	Amount       float64
}

func (q *Queries) GetNutrientsForRecipes(ctx context.Context, recipeIds []int64) ([]GetNutrientsForRecipesRow, error) {
	query := getNutrientsForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNutrientsForRecipesRow
	for rows.Next() {
		var i GetNutrientsForRecipesRow
		if err := rows.Scan(
			&i.IngredientID,
			&i.Nutrient.ID,
			&i.Nutrient.Name,
			&i.Nutrient.Unit,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, name, servings, minutes, description, created_by, created_at
FROM recipes
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Servings,
		&i.Minutes,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getStepsForRecipes = `-- name: GetStepsForRecipes :many
SELECT id, instructions, sort_order, recipe_id
FROM recipe_steps
WHERE recipe_id IN (
    /*SLICE:recipe_ids*/?
    )
ORDER BY sort_order
`

type GetStepsForRecipesRow struct {
	ID           int64
	Instructions string
	SortOrder    int64
	RecipeID     int64
}

func (q *Queries) GetStepsForRecipes(ctx context.Context, recipeIds []int64) ([]GetStepsForRecipesRow, error) {
	query := getStepsForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStepsForRecipesRow
	for rows.Next() {
		var i GetStepsForRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Instructions,
			&i.SortOrder,
			&i.RecipeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :many
SELECT id, name
FROM tags
WHERE (name, id) > (?1, CAST(?2 AS INTEGER))
ORDER BY name, id
LIMIT ?3
`

type GetTagsParams struct {
	LastName string
	LastID   int64
	Limit    int64
}

func (q *Queries) GetTags(ctx context.Context, arg GetTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags, arg.LastName, arg.LastID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsForRecipes = `-- name: GetTagsForRecipes :many
SELECT recipe_tags.recipe_id, tags.id, tags.name
FROM tags
         INNER JOIN recipe_tags ON tags.id = recipe_tags.tag_id
WHERE recipe_tags.recipe_id IN (
    /*SLICE:recipe_ids*/?
    )
ORDER BY tags.name
`

type GetTagsForRecipesRow struct {
	RecipeID int64
	Tag      Tag
}

func (q *Queries) GetTagsForRecipes(ctx context.Context, recipeIds []int64) ([]GetTagsForRecipesRow, error) {
	query := getTagsForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsForRecipesRow
	for rows.Next() {
		var i GetTagsForRecipesRow
		if err := rows.Scan(&i.RecipeID, &i.Tag.ID, &i.Tag.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnits = `-- name: GetUnits :many
SELECT id, symbol, name
FROM units
WHERE (name, id) > (?1, CAST(?2 AS INTEGER))
ORDER BY name, id
LIMIT ?3
`

type GetUnitsParams struct {
	LastName string
	LastID   int64
	Limit    int64
}

func (q *Queries) GetUnits(ctx context.Context, arg GetUnitsParams) ([]Unit, error) {
	rows, err := q.db.QueryContext(ctx, getUnits, arg.LastName, arg.LastID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(&i.ID, &i.Symbol, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, servings, minutes, description, created_by, created_at
FROM recipes
WHERE created_by = ?1
  AND (created_at, id) < (?2, CAST(?3 AS INTEGER))
ORDER BY created_at DESC, id DESC
LIMIT ?4
`

type ListRecipesParams struct {
	CreatedBy     int64
	LastCreatedAt time.Time
	LastID        int64
	Limit         int64
}

func (q *Queries) ListRecipes(ctx context.Context, arg ListRecipesParams) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes,
		arg.CreatedBy,
		arg.LastCreatedAt,
		arg.LastID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Servings,
			&i.Minutes,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :exec
UPDATE ingredients
SET name = ?
WHERE id = ?
`

type UpdateIngredientParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) error {
	_, err := q.db.ExecContext(ctx, updateIngredient, arg.Name, arg.ID)
	return err
}

const updateNutrient = `-- name: UpdateNutrient :exec
UPDATE nutrients
SET name = ?, unit = ?
WHERE id = ?
`

type UpdateNutrientParams struct {
	Name string
	Unit string
	ID   int64
}

func (q *Queries) UpdateNutrient(ctx context.Context, arg UpdateNutrientParams) error {
	_, err := q.db.ExecContext(ctx, updateNutrient, arg.Name, arg.Unit, arg.ID)
	return err
}

const updateRecipe = `-- name: UpdateRecipe :exec
UPDATE recipes
SET name = ?, servings = ?, minutes = ?, description = ?
WHERE id = ?
`

type UpdateRecipeParams struct {
	Name        string
	Servings    int64
	Minutes     int64
	Description string
	ID          int64
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, updateRecipe,
		arg.Name,
		arg.Servings,
		arg.Minutes,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateUnit = `-- name: UpdateUnit :exec
UPDATE units
SET name = ?, symbol = ?
WHERE id = ?
`

type UpdateUnitParams struct {
	Name   string
	Symbol *string
	ID     int64
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) error {
	_, err := q.db.ExecContext(ctx, updateUnit, arg.Name, arg.Symbol, arg.ID)
	return err
}
