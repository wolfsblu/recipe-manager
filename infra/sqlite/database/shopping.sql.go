// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: shopping.sql

package database

import (
	"context"
)

const createShoppingList = `-- name: CreateShoppingList :one
INSERT INTO shopping_lists (user_id, name)
VALUES (?, ?)
RETURNING id, user_id, name
`

type CreateShoppingListParams struct {
	UserID int64
	Name   string
}

func (q *Queries) CreateShoppingList(ctx context.Context, arg CreateShoppingListParams) (ShoppingList, error) {
	row := q.db.QueryRowContext(ctx, createShoppingList, arg.UserID, arg.Name)
	var i ShoppingList
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}

const createShoppingListItem = `-- name: CreateShoppingListItem :one
INSERT INTO shopping_list_items (shopping_list_id, ingredient, quantity, unit, done, sort_order)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, shopping_list_id, ingredient, quantity, unit, done, sort_order
`

type CreateShoppingListItemParams struct {
	ShoppingListID int64
	Ingredient     string
	Quantity       *string
	Unit           *string
	Done           bool
	SortOrder      int64
}

func (q *Queries) CreateShoppingListItem(ctx context.Context, arg CreateShoppingListItemParams) (ShoppingListItem, error) {
	row := q.db.QueryRowContext(ctx, createShoppingListItem,
		arg.ShoppingListID,
		arg.Ingredient,
		arg.Quantity,
		arg.Unit,
		arg.Done,
		arg.SortOrder,
	)
	var i ShoppingListItem
	err := row.Scan(
		&i.ID,
		&i.ShoppingListID,
		&i.Ingredient,
		&i.Quantity,
		&i.Unit,
		&i.Done,
		&i.SortOrder,
	)
	return i, err
}

const deleteShoppingList = `-- name: DeleteShoppingList :exec
DELETE FROM shopping_lists
WHERE id = ?
`

func (q *Queries) DeleteShoppingList(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShoppingList, id)
	return err
}

const deleteShoppingListItem = `-- name: DeleteShoppingListItem :exec
DELETE FROM shopping_list_items
WHERE id = ?
`

func (q *Queries) DeleteShoppingListItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShoppingListItem, id)
	return err
}

const getShoppingListByID = `-- name: GetShoppingListByID :one
SELECT id, user_id, name FROM shopping_lists
WHERE id = ?
`

func (q *Queries) GetShoppingListByID(ctx context.Context, id int64) (ShoppingList, error) {
	row := q.db.QueryRowContext(ctx, getShoppingListByID, id)
	var i ShoppingList
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}

const getShoppingListItemByID = `-- name: GetShoppingListItemByID :one
SELECT id, shopping_list_id, ingredient, quantity, unit, done, sort_order
FROM shopping_list_items
WHERE id = ? AND shopping_list_id = ?
`

type GetShoppingListItemByIDParams struct {
	ID             int64
	ShoppingListID int64
}

func (q *Queries) GetShoppingListItemByID(ctx context.Context, arg GetShoppingListItemByIDParams) (ShoppingListItem, error) {
	row := q.db.QueryRowContext(ctx, getShoppingListItemByID, arg.ID, arg.ShoppingListID)
	var i ShoppingListItem
	err := row.Scan(
		&i.ID,
		&i.ShoppingListID,
		&i.Ingredient,
		&i.Quantity,
		&i.Unit,
		&i.Done,
		&i.SortOrder,
	)
	return i, err
}

const getShoppingListItemsByListID = `-- name: GetShoppingListItemsByListID :many
SELECT id, shopping_list_id, ingredient, quantity, unit, done, sort_order
FROM shopping_list_items
WHERE shopping_list_id = ?
ORDER BY sort_order ASC
`

func (q *Queries) GetShoppingListItemsByListID(ctx context.Context, shoppingListID int64) ([]ShoppingListItem, error) {
	rows, err := q.db.QueryContext(ctx, getShoppingListItemsByListID, shoppingListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShoppingListItem
	for rows.Next() {
		var i ShoppingListItem
		if err := rows.Scan(
			&i.ID,
			&i.ShoppingListID,
			&i.Ingredient,
			&i.Quantity,
			&i.Unit,
			&i.Done,
			&i.SortOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShoppingListsByUserID = `-- name: GetShoppingListsByUserID :many
SELECT id, user_id, name FROM shopping_lists
WHERE user_id = ?1
  AND id > COALESCE(?2, 0)
ORDER BY id ASC
LIMIT ?3
`

type GetShoppingListsByUserIDParams struct {
	UserID int64
	Cursor *int64
	Limit  int64
}

func (q *Queries) GetShoppingListsByUserID(ctx context.Context, arg GetShoppingListsByUserIDParams) ([]ShoppingList, error) {
	rows, err := q.db.QueryContext(ctx, getShoppingListsByUserID, arg.UserID, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShoppingList
	for rows.Next() {
		var i ShoppingList
		if err := rows.Scan(&i.ID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShoppingList = `-- name: UpdateShoppingList :one
UPDATE shopping_lists
SET name = ?
WHERE id = ?
RETURNING id, user_id, name
`

type UpdateShoppingListParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateShoppingList(ctx context.Context, arg UpdateShoppingListParams) (ShoppingList, error) {
	row := q.db.QueryRowContext(ctx, updateShoppingList, arg.Name, arg.ID)
	var i ShoppingList
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}

const updateShoppingListItem = `-- name: UpdateShoppingListItem :one
UPDATE shopping_list_items
SET ingredient = ?, quantity = ?, unit = ?, done = ?
WHERE id = ?
RETURNING id, shopping_list_id, ingredient, quantity, unit, done, sort_order
`

type UpdateShoppingListItemParams struct {
	Ingredient string
	Quantity   *string
	Unit       *string
	Done       bool
	ID         int64
}

func (q *Queries) UpdateShoppingListItem(ctx context.Context, arg UpdateShoppingListItemParams) (ShoppingListItem, error) {
	row := q.db.QueryRowContext(ctx, updateShoppingListItem,
		arg.Ingredient,
		arg.Quantity,
		arg.Unit,
		arg.Done,
		arg.ID,
	)
	var i ShoppingListItem
	err := row.Scan(
		&i.ID,
		&i.ShoppingListID,
		&i.Ingredient,
		&i.Quantity,
		&i.Unit,
		&i.Done,
		&i.SortOrder,
	)
	return i, err
}

const updateShoppingListItemSortOrder = `-- name: UpdateShoppingListItemSortOrder :exec
UPDATE shopping_list_items
SET sort_order = ?
WHERE id = ?
`

type UpdateShoppingListItemSortOrderParams struct {
	SortOrder int64
	ID        int64
}

func (q *Queries) UpdateShoppingListItemSortOrder(ctx context.Context, arg UpdateShoppingListItemSortOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateShoppingListItemSortOrder, arg.SortOrder, arg.ID)
	return err
}
