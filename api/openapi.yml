openapi: 3.1.0
servers:
  - url: /api
info:
  version: 1.0.0
  title: Recipes
  description: An API to manage your favourite recipes
tags:
  - name: Recipes
    description: Everything about your recipes
  - name: User
    description: Everything related to the user
  - name: Meal Plan
    description: Define and fetch meal plans
  - name: Ingredients
    description: Everything about your ingredients
  - name: Units
    description: Everything about your units
  - name: Tags
    description: Everything about your tags
  - name: Shopping Lists
    description: Everything about your shopping lists
security:
  - cookieAuth: []
paths:
  /login:
    post:
      tags:
        - User
      security: []
      summary: Login a user
      operationId: login
      requestBody:
        description: Login a user with the provided credentials
        $ref: '#/components/requestBodies/Credentials'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/AuthenticatedUser'
        default:
          $ref: '#/components/responses/Error'
  /logout:
    post:
      tags:
        - User
      summary: Logout a user
      operationId: logout
      responses:
        '200':
          description: Successful operation
          headers:
            'Set-Cookie':
              $ref: '#/components/headers/SessionCookie'
        default:
          $ref: '#/components/responses/Error'
  /register:
    post:
      tags:
        - User
      security: []
      summary: Register a new user
      operationId: register
      requestBody:
        description: The new user credentials
        $ref: '#/components/requestBodies/UserRegistration'
      responses:
        '204':
          description: Registration was successful
        default:
          $ref: '#/components/responses/Error'
  /user/confirm:
    post:
      tags:
        - User
      security: [ ]
      summary: Confirm a user account after successful registration
      operationId: confirmUser
      requestBody:
        $ref: '#/components/requestBodies/ConfirmUser'
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
  /user/password:
    post:
      tags:
        - User
      security: [ ]
      summary: Modify a user's password based on a reset token
      operationId: updatePassword
      requestBody:
        $ref: '#/components/requestBodies/PasswordReset'
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
  /user/password/reset:
    post:
      tags:
        - User
      security: []
      summary: Reset password for an existing user by email
      operationId: resetPassword
      requestBody:
        description: The user's email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
  /user/profile:
    get:
      tags:
        - User
      summary: Get the profile of the logged in user
      operationId: getUserProfile
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
  /mealplan:
    get:
      tags:
        - Meal Plan
      summary: Get your meal plan
      operationId: getMealPlan
      parameters:
        - name: from
          in: query
          description: From when to fetch the meal plan
          schema:
            type: string
            format: date
            example: '2023-01-01'
        - name: until
          in: query
          description: Until when to fetch the meal plan
          schema:
            type: string
            format: date
            example: '2023-01-01'
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/MealPlan'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Meal Plan
      summary: Add a recipe to your meal plan
      operationId: createMealPlan
      requestBody:
        $ref: '#/components/requestBodies/WriteMealPlan'
      responses:
        '204':
          description: Recipe added to meal plan successfully
        default:
          $ref: '#/components/responses/Error'
  '/mealplan/{recipeId}':
    delete:
      tags:
        - Meal Plan
      summary: Remove a recipe from your meal plan
      operationId: deleteMealPlan
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to remove from meal plan
          required: true
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          description: Date to remove the recipe from meal plan
          required: true
          schema:
            type: string
            format: date
            example: '2023-01-01'
      responses:
        '204':
          description: Recipe removed from meal plan successfully
        default:
          $ref: '#/components/responses/Error'
  /recipes:
    get:
      tags:
        - Recipes
      summary: Get all recipes
      operationId: getRecipes
      parameters:
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/RecipeList'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Recipes
      summary: Add a new recipe to the store
      operationId: addRecipe
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        description: Create a new recipe in the store
        $ref: '#/components/requestBodies/Recipe'
  '/recipes/{recipeId}':
    get:
      tags:
        - Recipes
      summary: Find a recipe by ID
      description: Returns a single recipe
      operationId: getRecipeById
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Recipes
      summary: Updates a recipe in the store
      description: ''
      operationId: updateRecipe
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Recipe'
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - Recipes
      summary: Partially update a recipe
      description: Apply partial updates to a recipe by merging the provided fields
      operationId: patchRecipe
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to patch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Partial recipe data to merge
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRecipe'
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Recipes
      summary: Deletes a recipe
      description: ''
      operationId: deleteRecipe
      parameters:
        - name: recipeId
          in: path
          description: Recipe ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        default:
          $ref: '#/components/responses/Error'
  /ingredients:
    get:
      tags:
        - Ingredients
      summary: Get all ingredients
      operationId: getIngredients
      parameters:
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/IngredientList'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Ingredients
      summary: Add a new ingredient
      operationId: addIngredient
      requestBody:
        $ref: '#/components/requestBodies/WriteIngredient'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/Ingredient'
        default:
          $ref: '#/components/responses/Error'
  '/ingredients/{ingredientId}':
    put:
      tags:
        - Ingredients
      summary: Update an ingredient
      operationId: updateIngredient
      parameters:
        - name: ingredientId
          in: path
          description: ID of the ingredient to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/WriteIngredient'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/Ingredient'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Ingredients
      summary: Delete an ingredient
      operationId: deleteIngredient
      parameters:
        - name: ingredientId
          in: path
          description: ID of the ingredient to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
  /units:
    get:
      tags:
        - Units
      summary: Get all units
      operationId: getUnits
      parameters:
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/UnitList'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Units
      summary: Add a new unit
      operationId: addUnit
      requestBody:
        $ref: '#/components/requestBodies/WriteUnit'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/Unit'
        default:
          $ref: '#/components/responses/Error'
  '/units/{unitId}':
    put:
      tags:
        - Units
      summary: Update a unit
      operationId: updateUnit
      parameters:
        - name: unitId
          in: path
          description: ID of the unit to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/WriteUnit'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/Unit'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Units
      summary: Delete a unit
      operationId: deleteUnit
      parameters:
        - name: unitId
          in: path
          description: ID of the unit to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
  /tags:
    get:
      tags:
        - Tags
      summary: Get all tags
      operationId: getTags
      parameters:
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/TagList'
        default:
          $ref: '#/components/responses/Error'
  /shopping-lists:
    get:
      tags:
        - Shopping Lists
      summary: Get all shopping lists for the user
      operationId: getShoppingLists
      parameters:
        - $ref: '#/components/parameters/CursorParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/ShoppingLists'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Shopping Lists
      summary: Create a new shopping list
      operationId: createShoppingList
      requestBody:
        $ref: '#/components/requestBodies/WriteShoppingList'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/ShoppingList'
        default:
          $ref: '#/components/responses/Error'
  '/shopping-lists/{shoppingListId}':
    get:
      tags:
        - Shopping Lists
      summary: Get a shopping list by ID
      operationId: getShoppingListById
      parameters:
        - name: shoppingListId
          in: path
          description: ID of the shopping list to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/ShoppingList'
        default:
          $ref: '#/components/responses/Error'
    put:
      tags:
        - Shopping Lists
      summary: Update a shopping list
      operationId: updateShoppingList
      parameters:
        - name: shoppingListId
          in: path
          description: ID of the shopping list to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/WriteShoppingList'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/ShoppingList'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Shopping Lists
      summary: Delete a shopping list
      operationId: deleteShoppingList
      parameters:
        - name: shoppingListId
          in: path
          description: ID of the shopping list to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
  '/shopping-lists/{shoppingListId}/items':
    post:
      tags:
        - Shopping Lists
      summary: Add an item to a shopping list
      operationId: addShoppingListItem
      parameters:
        - name: shoppingListId
          in: path
          description: ID of the shopping list
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/WriteShoppingListItem'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/ShoppingListItem'
        default:
          $ref: '#/components/responses/Error'
  '/shopping-lists/{shoppingListId}/items/{itemId}':
    put:
      tags:
        - Shopping Lists
      summary: Update a shopping list item
      operationId: updateShoppingListItem
      parameters:
        - name: shoppingListId
          in: path
          description: ID of the shopping list
          required: true
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          description: ID of the item to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/WriteShoppingListItem'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/ShoppingListItem'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Shopping Lists
      summary: Delete a shopping list item
      operationId: deleteShoppingListItem
      parameters:
        - name: shoppingListId
          in: path
          description: ID of the shopping list
          required: true
          schema:
            type: integer
            format: int64
        - name: itemId
          in: path
          description: ID of the item to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/Error'
components:
  parameters:
    CursorParam:
      name: cursor
      in: query
      description: Cursor for pagination (opaque token from previous response)
      required: false
      schema:
        type: string
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return (default 30, max 100)
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 30
  headers:
    SessionCookie:
      description: Sets the session for the logged in user
      schema:
        type: string
        examples:
          - SESSID=123; Path=/; HttpOnly
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSID
  schemas:
    UserRegistration:
      allOf:
        - $ref: '#/components/schemas/Credentials'
        - type: object
          required:
            - locale
          properties:
            locale:
              type: string
              examples:
                - en
    Credentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          examples:
            - test@example.com
        password:
          type: string
          examples:
            - Spaghetti Carbonara
    Error:
      type: object
      description: Represents an error
      properties:
        message:
          type: string
      required:
        - message
    PaginationMetadata:
      type: object
      required:
        - hasMore
      properties:
        nextCursor:
          type: string
          nullable: true
          description: Cursor for fetching the next page (null if no more pages)
          examples:
            - eyJpZCI6MTIzfQ==
        hasMore:
          type: boolean
          description: Whether there are more items available
          examples:
            - true
    PaginatedRecipes:
      allOf:
        - $ref: '#/components/schemas/PaginationMetadata'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ReadRecipe'
    PaginatedIngredients:
      allOf:
        - $ref: '#/components/schemas/PaginationMetadata'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Ingredient'
    PaginatedUnits:
      allOf:
        - $ref: '#/components/schemas/PaginationMetadata'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ReadUnit'
    PaginatedTags:
      allOf:
        - $ref: '#/components/schemas/PaginationMetadata'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ReadTag'
    PaginatedShoppingLists:
      allOf:
        - $ref: '#/components/schemas/PaginationMetadata'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ReadShoppingList'
    PaginatedMealPlan:
      allOf:
        - $ref: '#/components/schemas/PaginationMetadata'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ReadMealPlan'
    Nutrient:
      type: object
      required:
        - id
        - name
        - unit
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 1
        name:
          type: string
          examples:
            - Protein
        unit:
          type: string
          examples:
            - g
    IngredientNutrient:
      allOf:
        - $ref: '#/components/schemas/Nutrient'
        - type: object
          required:
            - amount
          properties:
            amount:
              type: number
              format: float64
              examples:
                - 10.5
    Ingredient:
      type: object
      required:
        - id
        - name
        - nutrients
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 10
        name:
          type: string
          examples:
            - Flour
        nutrients:
          type: array
          items:
            $ref: '#/components/schemas/IngredientNutrient'
    PasswordReset:
      allOf:
        - $ref: '#/components/schemas/Token'
        - type: object
          required:
            - password
          properties:
            password:
              type: string
              examples:
                - my new password
    ReadMealPlan:
      type: object
      required:
        - date
      properties:
        date:
          type: string
          description: When are these recipes planned
          examples:
            - 2006-06-01
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/ReadRecipe'
    ReadRecipe:
      allOf:
        - $ref: '#/components/schemas/BaseRecipe'
        - type: object
          required:
            - id
            - steps
          properties:
            id:
              type: integer
              format: int64
              examples:
                - 10
            steps:
              type: array
              items:
                $ref: '#/components/schemas/ReadRecipeStep'
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ReadTag'
    ReadUnit:
      type: object
      required:
        - id
        - name
        - symbol
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 10
        name:
          type: string
          examples:
            - Kilogram
        symbol:
          type: string
          nullable: true
          examples:
            - kg
    ReadTag:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 1
        name:
          type: string
          examples:
            - Vegetarian
    ReadUser:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 10
        email:
          type: string
          examples:
            - user@example.com
    RecipeStatus:
      type: string
      description: Recipe status in the store
      enum:
        - available
        - pending
        - sold
    WriteRecipeStep:
      type: object
      required:
        - instructions
      properties:
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/WriteStepIngredient'
        instructions:
          type: string
          description: Textual instructions for this step
          examples:
            - "Put chicken into pan and cook on medium heat."
    ReadRecipeStep:
      type: object
      required:
        - id
        - instructions
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 10
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ReadStepIngredient'
        instructions:
          type: string
          description: Textual instructions for this step
          examples:
            - "Put chicken into pan and cook on medium heat."
    WriteStepIngredient:
      type: object
      required:
        - amount
        - ingredientId
        - unitId
      properties:
        ingredientId:
          type: integer
          format: int64
          examples:
            - 3
        unitId:
          type: integer
          format: int64
          examples:
            - 4
        amount:
          type: number
          format: float64
          examples:
            - 3.5
    ReadStepIngredient:
      allOf:
        - $ref: '#/components/schemas/Ingredient'
        - type: object
          required:
            - amount
            - unit
          properties:
            unit:
              $ref: '#/components/schemas/ReadUnit'
            amount:
              type: number
              format: float64
              examples:
                - 3.5
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          examples:
            - abd87ec862b6b8ecc2cf45c170d887d21e835a35f8537ea35ff1af102faa5920
    RecipeBaseFields:
      type: object
      properties:
        name:
          type: string
          examples:
            - Spaghetti Carbonara
        description:
          type: string
          description: The HTML description of the recipe
          examples:
            - My tasty spaghetti recipe
        servings:
          type: integer
          format: int64
          description: How many servings you'll get with this recipe
          examples:
            - 4
        minutes:
          type: integer
          format: int64
          description: How long it takes to prepare this recipe (in minutes)
          examples:
            - 45
        images:
          type: array
          items:
            type: string
            format: uri
            examples:
              - https://example.com/spaghetti-carbonara.jpg
      encoding:
        images:
          contentType: image/jpeg, image/png
    RecipeWriteFields:
      allOf:
        - $ref: '#/components/schemas/RecipeBaseFields'
        - type: object
          properties:
            steps:
              type: array
              items:
                $ref: '#/components/schemas/WriteRecipeStep'
            tags:
              type: array
              items:
                type: integer
                format: int64
                examples:
                  - 1
    BaseRecipe:
      allOf:
        - $ref: '#/components/schemas/RecipeBaseFields'
        - type: object
          required:
            - description
            - minutes
            - name
            - servings
    WriteRecipe:
      allOf:
        - $ref: '#/components/schemas/RecipeWriteFields'
        - $ref: '#/components/schemas/BaseRecipe'
        - type: object
          required:
            - steps
    PatchRecipe:
      $ref: '#/components/schemas/RecipeWriteFields'
    WriteIngredientNutrient:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 1
        amount:
          type: number
          format: float64
          examples:
            - 10.5
    WriteIngredient:
      type: object
      required:
        - name
        - nutrients
      properties:
        name:
          type: string
          examples:
            - Flour
        nutrients:
          type: array
          items:
            $ref: '#/components/schemas/WriteIngredientNutrient'
    WriteUnit:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          examples:
            - Kilogram
        symbol:
          type: string
          nullable: true
          examples:
            - kg
    ReadShoppingList:
      type: object
      required:
        - id
        - name
        - items
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 1
        name:
          type: string
          examples:
            - Weekly Shopping List
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReadShoppingListItem'
    WriteShoppingList:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          examples:
            - Weekly Shopping List
    ReadShoppingListItem:
      type: object
      required:
        - id
        - ingredient
        - quantity
        - unit
        - done
        - sortOrder
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 1
        ingredient:
          type: string
          examples:
            - Milk
        quantity:
          type: string
          nullable: true
          examples:
            - 1
        unit:
          type: string
          nullable: true
          examples:
            - gallon
        done:
          type: boolean
          examples:
            - false
        sortOrder:
          type: integer
          format: int64
          examples:
            - 0
    WriteShoppingListItem:
      type: object
      required:
        - ingredient
      properties:
        ingredient:
          type: string
          examples:
            - Milk
        quantity:
          type: string
          nullable: true
          examples:
            - 1
        unit:
          type: string
          nullable: true
          examples:
            - gallon
        done:
          type: boolean
          default: false
          examples:
            - false
    WriteMealPlan:
      type: object
      required:
        - recipeId
        - date
      properties:
        recipeId:
          type: integer
          format: int64
          examples:
            - 10
        date:
          type: string
          format: date
          examples:
            - '2023-01-01'
  requestBodies:
    UserRegistration:
      description: User registration credentials
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegistration'
    Credentials:
      description: User credentials
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credentials'
    Recipe:
      description: Recipe object and related images
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteRecipe'
    PasswordReset:
      description: The user's new password as well as the required reset token
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordReset'
    ConfirmUser:
      description: The user's new password as well as the required reset token
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
    WriteIngredient:
      description: Ingredient object to create or update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteIngredient'
    WriteUnit:
      description: Unit object to create or update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteUnit'
    WriteShoppingList:
      description: Shopping list object to create or update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteShoppingList'
    WriteShoppingListItem:
      description: Shopping list item object to create or update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteShoppingListItem'
    WriteMealPlan:
      description: Meal plan entry to create
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteMealPlan'
  responses:
    Error:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthenticatedUser:
      description: User object returned as result
      headers:
        'Set-Cookie':
          $ref: '#/components/headers/SessionCookie'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUser'
    IngredientList:
      description: A paginated list of ingredients
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedIngredients'
    UnitList:
      description: A paginated list of units
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedUnits'
    TagList:
      description: A paginated list of tags
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedTags'
    MealPlan:
      description: Paginated meal plan for the user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedMealPlan'
    RecipeList:
      description: Paginated recipe list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedRecipes'
    Recipe:
      description: Recipe object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadRecipe'
    User:
      description: User object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUser'
    Ingredient:
      description: Ingredient object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ingredient'
    Unit:
      description: Unit object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUnit'
    ShoppingLists:
      description: A paginated list of shopping lists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedShoppingLists'
    ShoppingList:
      description: Shopping list object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadShoppingList'
    ShoppingListItem:
      description: Shopping list item object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadShoppingListItem'